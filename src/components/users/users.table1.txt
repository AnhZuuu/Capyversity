'use client'

import { IUser } from "@/types/backend";
import { Pagination, Table } from "antd";
import type { ColumnsType } from 'antd/es/table';
import { usePathname, useSearchParams, useRouter } from "next/navigation";
// import { useRouter } from "next/router";
import { useEffect, useState } from "react";

interface IProps {
  users: IUser[] | [];
  meta: {
    current: number;
    pageSize: number;
    total: number;
  }
}

//////////////////////////// useEffect sẽ fetching ở phía client    ////useSWR và React Query thường client-side render
const UsersTable = (props: IProps) => {

  //phân trang
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const { replace } = useRouter();
  const [isFetching, setIsFetching] = useState<boolean>(false);

  const { users, meta } = props;
  const [isCreateModalOpen, setIsCreateModalOpen] = useState<boolean>(false);
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState<boolean>(false);
  const [dataUpdate, setDataUpdate] = useState<any>(null);

  useEffect(() => {
      if(users) setIsFetching(false)
  }, [users])


  //Interface IProps sẽ truyền data thông qua props cho cái table này
  // const dataSource = [
  //     {
  //       id: 1,
  //       name: 'Mike',
  //       email: '@gmail',

  //     },
  //     {
  //       id: 2,
  //       name: 'John',
  //       email: '@gmail.com',

  //     },
  //   ];


  const columns: ColumnsType<IUser> = [
    {
      title: 'Id',
      dataIndex: 'id',

    },
    {
      title: 'Email',
      dataIndex: 'email',

    },
    {
      title: 'Name',
      dataIndex: 'name',

    },
  ];

  const onChange = (pagination: any, filters: any, sorter: any, extra: any) => {
    if (pagination && pagination.current) {
      const params = new URLSearchParams(searchParams);
      params.set('page', pagination.current);
      replace(`${pathname}?${params.toString()}`);
      setIsFetching(true)
    }
  };

  return (
    <div>
      <Table
        loading={isFetching}
        rowKey={"id"}
        bordered
        dataSource={users}
        columns={columns}
        onChange={onChange}
        pagination={
          {
            ...meta,
            showTotal: (total, range) => {
              return (<div> {range[0]} - {range[1]} trên {total} rows </div>)
            }
          }
        }
      />;
    </div>
  )
}
export default UsersTable;